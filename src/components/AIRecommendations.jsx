import { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Chip,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Collapse,
  CircularProgress,
  Divider
} from '@mui/material';
import BoltIcon from '@mui/icons-material/Bolt';
import AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';

const AIRecommendations = ({ requirements }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [suggestions, setSuggestions] = useState([]);
  const [expanded, setExpanded] = useState(true);
  const [processedCount, setProcessedCount] = useState(0);

  useEffect(() => {
    // Simulate AI processing requirements
    setIsLoading(true);
    setProcessedCount(0);
    
    // Demo suggestions - in a real app these would be generated by an AI model
    const demoSuggestions = [
      {
        original: "The application will be nice and user-friendly.",
        improved: "The application must have intuitive navigation with a maximum of 3 clicks to reach any feature, following Material Design guidelines.",
        reason: "Added specific metrics and design standard references"
      },
      {
        original: "The system must provide a dashboard with recent activities.",
        improved: "The system must provide a dashboard displaying the last 10 user activities, sorted by date, with filtering options for activity type.",
        reason: "Added specificity regarding quantity and functionality"
      },
      {
        original: "The application should be highly available.",
        improved: "The application must maintain 99.9% uptime during business hours (8am-6pm) and 99% uptime during non-business hours.",
        reason: "Replaced ambiguous 'highly available' with specific uptime metrics"
      }
    ];
    
    // Process suggestions with delay to simulate AI thinking
    const timer = setInterval(() => {
      setProcessedCount(prev => {
        const newCount = prev + 1;
        if (newCount >= requirements.length) {
          clearInterval(timer);
          setTimeout(() => {
            setSuggestions(demoSuggestions);
            setIsLoading(false);
          }, 800);
        }
        return newCount;
      });
    }, 400);
    
    return () => clearInterval(timer);
  }, [requirements]);

  const handleApplySuggestion = (index) => {
    // In a real app, this would update the requirement
    setSuggestions(prev => 
      prev.map((sugg, i) => 
        i === index ? { ...sugg, applied: true } : sugg
      )
    );
  };

  return (
    <Paper 
      elevation={0} 
      sx={{ 
        border: '1px solid #e0e7ff', 
        borderRadius: 2, 
        p: 2, 
        mb: 3,
        backgroundColor: '#f8faff'
      }}
    >
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'space-between',
          alignItems: 'center',
          cursor: 'pointer',
          mb: expanded ? 2 : 0
        }}
        onClick={() => setExpanded(!expanded)}
      >
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <BoltIcon color="primary" sx={{ mr: 1 }} />
          <Typography variant="h6">
            AI Recommendations
          </Typography>
          <Chip 
            label={isLoading ? "Analyzing..." : `${suggestions.length} suggestions`}
            size="small"
            color="primary"
            sx={{ ml: 1 }}
          />
        </Box>
        {expanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
      </Box>
      
      <Collapse in={expanded}>
        {isLoading ? (
          <Box sx={{ textAlign: 'center', py: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <CircularProgress size={40} sx={{ mb: 2 }} />
            <Typography variant="body2" color="textSecondary">
              AI is analyzing your requirements...
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Processed {processedCount} of {requirements.length} requirements
            </Typography>
          </Box>
        ) : (
          <List disablePadding>
            {suggestions.map((suggestion, index) => (
              <ListItem 
                key={index}
                alignItems="flex-start"
                sx={{ 
                  backgroundColor: suggestion.applied ? '#f0f9f0' : 'white',
                  borderRadius: 1,
                  mb: 2,
                  border: '1px solid #e0e0e0',
                  transition: 'all 0.3s',
                  p: 2
                }}
              >
                <ListItemIcon sx={{ mt: 0 }}>
                  <AutoFixHighIcon color={suggestion.applied ? "success" : "primary"} />
                </ListItemIcon>
                <ListItemText
                  primary={
                    <Typography variant="subtitle1" fontWeight="medium">
                      {suggestion.applied ? "Improved requirement applied" : "Suggestion to improve requirement"}
                    </Typography>
                  }
                  secondary={
                    <Box sx={{ mt: 1 }}>
                      <Typography variant="body2" component="div" sx={{ mb: 1 }}>
                        <strong>Original:</strong> {suggestion.original}
                      </Typography>
                      <Typography 
                        variant="body2" 
                        component="div" 
                        sx={{ 
                          mb: 1, 
                          backgroundColor: '#f0f7ff', 
                          p: 1, 
                          borderRadius: 1,
                          borderLeft: '3px solid #1976d2'
                        }}
                      >
                        <strong>Improved:</strong> {suggestion.improved}
                      </Typography>
                      <Typography variant="caption" color="textSecondary">
                        <strong>Reasoning:</strong> {suggestion.reason}
                      </Typography>
                      
                      {!suggestion.applied && (
                        <Box sx={{ mt: 2 }}>
                          <Button 
                            variant="contained" 
                            color="primary" 
                            size="small"
                            startIcon={<CheckCircleIcon />}
                            onClick={() => handleApplySuggestion(index)}
                          >
                            Apply Suggestion
                          </Button>
                        </Box>
                      )}
                    </Box>
                  }
                />
              </ListItem>
            ))}
          </List>
        )}
      </Collapse>
    </Paper>
  );
};

export default AIRecommendations;